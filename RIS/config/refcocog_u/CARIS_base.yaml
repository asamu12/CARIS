DATA:
  dataset: refcocog_u
  train_txt: datasets/txt/refcoco_u/train.txt
  train_split: train
  val_txt: datasets/txt/refcoco_u/val.txt
  val_split: val
  mask_root: datasets/masks/refcocog_u
TRAIN:
  visual_module_dim: 128
  visual_module_layer: [1,3,5,7,9,11]
  txt_module_dim: 64
  txtual_module_layer: [1,3,5,7,9,11]
  # Base Arch
  clip_pretrain: pretrain/ViT-B-16.pt
  dino_pretrain: pretrain/dinov2_vitb14_reg4_pretrain.pth
  dino_layers: 12
  output_dinov2: [4, 8]
  dino_name: dino-base
  model_name: CLIP-b-16
  input_size: 448
  word_len: 22
  word_dim: 512
  ladder_dim: 128
  nhead: 8
  multi_stage: 3
  stride: [1, 1, 1]
  vis_dim: 512
  fpn_in: [768, 768, 768]
  fpn_out: [256, 512, 1024]
  sync_bn: True

  # Decoder
  num_layers: 3
  num_head: 8
  dim_ffn: 512
  dropout: 0.1
  intermediate: False
  # Training Setting
  workers: 2  # data loader workers
  workers_val: 1
  epochs: 65
  milestones: [35,55]
  start_epoch: 0
  batch_size: 28  # 32batch size for training
  batch_size_val: 28  # 64batch size for validation during training, memory and speed tradeoff
  base_lr: 0.0001
  lr_decay: 0.1
  lr_multi: 1
  weight_decay: 0.
  max_norm: 0.
  manual_seed: 0
  print_freq: 100
  # Resume & Save
  exp_name: CARIS_base
  output_folder: exp/refcocog_u
  save_freq: 1
  weight:  # path to initial weight (default: none)
  resume: # path to latest checkpoint (default: none)
  evaluate: True  # evaluate on validation set, extra gpu memory needed and small batch_size_val is recommend
Distributed:
  dist_url: tcp://localhost:3681
  dist_backend: 'nccl'
  multiprocessing_distributed: True
  world_size: 1
  rank: 0
TEST:
  test_split: val-test
  test_txt: datasets/txt/refcoco_u/test.txt
  visualize: False
